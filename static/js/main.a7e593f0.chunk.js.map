{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","markAsDone","setEdit","map","todo","index","isComplete","isEditable","undefined","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","temp","isDone","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7e593f0.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className='todo-form'>\n      {props.edit ? (\n        <>\n          <input\n            placeholder='Update your item'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            ref={inputRef}\n            className='todo-input edit'\n          />\n          <button onClick={handleSubmit} className='todo-button edit'>\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n          <input\n            placeholder='Add an item'\n\n            \n            value={input}\n            onChange={handleChange}\n            name='text'\n            className='todo-input'\n            ref={inputRef}\n          />\n          <button onClick={handleSubmit} className='todo-button'>\n            Add todo\n          </button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { MdDeleteForever } from 'react-icons/md';\nimport { TiEdit } from 'react-icons/ti';\nimport { FcApproval } from \"react-icons/fc\";\n//import { Checkmark } from 'react-checkmark';\n\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo, markAsDone }) => {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n  });\n\n  const submitUpdate = value => {\n    updateTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: ''\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return todos.map((todo, index) => (\n    <div\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n      key={index}\n    >\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n        {todo.text}\n      </div>\n      <div className='icons'>\n        {todo.isEditable?<TiEdit\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n          className='edit-icon'\n        />: undefined}\n        <MdDeleteForever\n          onClick={() => removeTodo(todo.id)}\n          className='delete-icon'\n        />\n        <FcApproval\n         onClick={() => markAsDone(index)}\n          className='mark-done'\n        />\n      </div>\n    </div>\n  ));\n};\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n    \n    todo['isEditable']=true;\n    todo['isDone']=false;\n\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n    console.log(...todos);\n  };\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => \n      prev.map(item => {\n        if( item.id === todoId) item.text = newValue.text\n        return item;\n        }));\n      }\n        \n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n\n    setTodos(removedArr);\n  };\n\n  const markAsDone = index => {\n    let temp = [...todos];\n    temp[index].isDone=true;\n    temp[index].isEditable=false;\n    setTodos(temp);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <>\n      <h1>Todo App</h1>\n      <TodoForm onSubmit={addTodo} />\n      <Todo\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        markAsDone={markAsDone}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n}\n\nexport default TodoList;\n","import React from 'react'\nimport './App.css'\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}